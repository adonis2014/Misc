1. git checkout -b branchName
   git checkout -b branchName 0d1d7fc32(commitId) # create a branch based on previous commit
   git rebase master
   git rebase -i master~1        # 最后一次
   git rebase -i master~5        # 最后五次
   git commit -a —amend          # 修改前一次的提交，保持原有的commit id
   git cherry pick
   git reset —-hard commit id
   git diff HEAD^ > nioc-host.diff
   git diff commitId1 commitId2 > file.diff   # commitId1是旧的，commitId2是新的, commitId2领先于commitId1
   git diff --stat HEAD^1        # 显示前一个commit改动的数据
   git apply nioc-host.diff
   git config
   git rebase master     # when you are on your branch and rebase master first.
   git merge yourBranch  # when you are on master branch and trying to merge changes on your branch into master branch.
   git show commit id    # 显示这个commit的改动部分
   
2. git remote add upstream git@github.com:linkedin/ambry.git   # set up upstream to be ambry project on github
   git fetch upstream                                          # Fetch all updates from upstream to this repo
   git merge upstream/master                                   # Merge the changes from upstream/master into your local master branch
   git pull --rebase upstream master      # which is equivalent to git fetch upstream + git merge upstream/master
   git rebase upstream/master                                  # rebase any changes on top of the change in upstream
   git push --force                                            # after rebasing the local branch, directly force push to remote
   git commit -a -m "msg"                       # commit changes: one line short description and multiline explanation of description
   git rebase -i 49687a0a646954afdf3f4dae1f914ea793341ea2(commit id) # 进入交互式
        pick 033beb4 this is first commit
        pick d426a8a this is second commit
   修改为
        pick 033beb4 this is first commit
        squash d426a8a this is second commit   (这样就把第二条commit merge到第一条commit中去了)
                                              （squash的作用就是把当前commit向前合并，一直合并到pick为止。）
   最后重写commit的description
   
3. git checkout -- filename      # to discard changes in working directory
   git branch -d branch_name     # delete branch

4. How to undo “git commit --amend” done instead of “git commit” # 如何撤销 git commit -a --amend
   Step1:  git reset --soft HEAD@{1}   # Move the current head so that it's pointing at the old commit
   Step2:  git commit -C HEAD@{1}      # Commit the current tree using the commit details of the previous HEAD commit

5. checkout pull request to local repo
(1) edit .git/config
[remote "upstream"]
	fetch = +refs/heads/*:refs/remotes/origin/*
	url = git@github.com:joyent/node.git
	fetch = +refs/pull/*/head:refs/remotes/origin/pr/*
(2) run command   
git fetch upstream pull/7324/head:pr-7324 # pr-7324 is your local branch name

6. git stash       // if you want to switch branch but don't want to commit current changes. Use git stash to save working directory.
   git stash list  // to see which stashes you’ve stored.
   git stash apply // reapply the one you just stashed 

7. git revert // git revert 撤销某次操作，此次操作之前和之后的 commit 和 history 都会保留，并且把这次撤销作为一次最新的提交。
              // git revert是提交一个新的版本，将需要revert的版本的内容再反向修改回去，版本会递增，不影响之前提交的内容
	      
8. GIT delete untracked files
   git clean -n // If you want to see which files will be deleted you can use the -n option before running actual command
   git clean -f // delete untracked files
   git clean -f -d // delete directories

