一般用户只能通过shell来与操作系统内核通信。Shell有点像普通的应用程序，应用程序其实是在最外层，如同鸡蛋外壳一样，因此就被称为Shell。
Shell有好几个版本，一般在/etc/shells中记录：
  Bourne SHell = sh
  Bourne Again SHell = bash (Linux默认的shell)
  Kornshell = ksh  (兼容bash，商业上常用)
  以及 tcsh, csh, zsh等
  
  1. Shell变量
     环境变量 = 全局变量     通常大写字符 PATH HOME MAIL
     自定义变量 = 局部变量
     
     变量被调用时要加$，变量被set时不需要$
     echo $variable
     variable="test"
     
     规则：<1>变量设置时用=连接，且不能有空格；
          <2>变量名只能是英文字母数字，不能数字开头；
          <3>双引号内特殊字符$，仍保有原本特性 var="lang is $LANG" 那么 echo $var 得到 lang is en_US
          <4>单引号内特殊字符等同一般字符。    var='lang is $LANG' 那么 echo $var 得到 lang is $LANG
          <5>可以用转义字符\ 将特殊字符转为一般字符
          <6>命令中嵌套命令可以用 $(命令) 或者 `命令`
          <7>若要增加变量内容(append), 可以用 "$var" 或 ${var} 比如：PATH="$PATH":/home/bin
          <8>若该变量需要在其他子进程执行，需要以export来使变量变为环境变量
          <9>取消变量用 unset var 不用带$
          
2. env 列出所有环境变量的内容
   set 查看所有变量（环境变量+自定义变量）
   export 自定义变量转成环境变量
   
   PS1 提示符的设置  比如 ~ zhangyingyi$
   $ 本shell的PID
   ? 关于上个执行命令的return值

3. locale 查询该系统支持的语系
   设置LANG或LC_ALL后，其他语系变量会被这两个变量替代

4. read 从键盘读取变量
   read -p "Please enter your name: " -t 30 username #提示用户30秒内输入姓名  -p接提示符 -t接等待秒数
5. declare 声明变量的类型
   declare [-aixr] variable #将变量声明为 -a 数组类型；-i整数类型；-x 环境变量； -r只读类型
   declare -a var
   var[1]="first"; var[2]="second"; var[3]="third"  #设置数组的元素值
   
6. ulimit 限制用户的系统资源 （打开文件的数量，CPU使用时间，可使用的内存总量）
   ulimit -a 可列出所有的限制额度
   ulimit -f 限制用户可以创建的最大文件容量，单位是KB
   ulimit -u 单一用户可以使用的最大进程数量
   # 要复原ulimit的设置最简单的方法是注销再登录

7. alias, unalias 别名设置
   alias # 列出当前定义的命令别名
   alias rm='rm -i' # 将rm -i命令命名为rm命令
   unalias rm       # 取消命令别名
8. history 历史命令
   history n  列出最近n条命令行
   history -c 将目前shell中所有的history内容全部消除
   history -w 将目前history记忆内容写入 ~/.bash_history
9. 命令路径的查找顺序：
   <1> 以相对或绝对路径执行命令，例如 “/bin/ls” 或 “./ls”
   <2> 由alias找到该命令来执行
   <3> 由bash内置的（built-in）命令来执行
   <4> 通过$PATH这个变量，顺序找到第一个命令来执行
   
10. bash环境中的通配符 
    *     #代表0到无穷多个任意字符
    ？    #代表一定有1个任意字符
    []    #代表一定有一个在括号内的字符, 比如[a,b,c]
    [-]   #代表编码顺序内的所有字符  例如[1-9]或[a-z] 表示1-9或a-z其中的一个字符
    [^]   #反向选择, 例如[^abc]不是a,b,c的一个字符
11. bash中的特殊符号
    # 注释符号；           ~ 用户的主文件夹；           >, >> 数据流重定向，输出导向；       ` ` 先执行的命令
    \ 转义符号；           $ 变量前导符；              <, << 数据流重定向，输入导向；       $() 先执行的命令
    | 管道符号；           & 作业控制（job control）   ''    单引号，不具备变量置换功能     ( ) 子shell的其实与结束
    ; 连续命令分隔符；      / 目录符号                  ""   双引号，具备变量置换功能       { } 中间为命令块的组合

12. 数据流重定向(redirect)
    标准输入(stdin): 代码为0， 使用 < 或 << 
    标准输出(stdout): 代码为1，使用 > 或 >>
    错误输出(stderr): 代码为2，使用 2> 或 2>>
    【注意】： > 输出到一个已存在的文件，那么这个文件会被覆盖掉；
             >> 输出到一个已存在的文件，内容会append到已有文件；
    find /home -name tmp 2> /dev/null   # /dev/null 是黑洞设备
    find /home -name tmp > list 2>&1    # 将标准输出和错误输出都写入同一文件list
    cat > file < ~/.bashrc              # 用.bashrc文件作为file的输入来填充
    cat > file << "eof"                 # 键盘内容写入file，以eof为终止符

13. cmd1 && cmd2         # 若cmd1执行完且正确($?=0)，才执行cmd2；若cmd1执行错误($?≠0)，则不执行cmd2；
    cmd1 || cmd2         # 若cmd1执行正确，则不执行cmd2； 只有当cmd1执行错误，才执行cmd2；
14. pipe 管道命令
    管道命令仅会处理standard output，对于standard error output会予以忽略；
    管道命令必须要能够接受来自前一个命令的数据成为standard input继续处理才行；
    
15. cut  # 把信息“切“出来，以”行“为单位处理 （在处理多空格相连的数据时，会出问题）
    cut -d '分隔符' -f fields(字段号)
    cut -c 字符范围
    export | cut -c 12-             # 输出第12个字符之后的所有字符串
    echo $PATH | cut -d ':' -f 3,5  # 输出PATH中第3个和第5个路径
     
16. grep
    grep [-acinv] '查找字符串'  filename
    -c  #显示找到字符串的次数
    -i  #忽略大小写
    -n  #显示行数
    -v  #反向选择，显示没有'查找字符串'的那一行
    grep [-A] [-B] '查找字符串' filename  # -A=after，列出该行及之后的n行；-B=before，列出该行和之前的n行
    
17. sort 可依据不同数据类型排序
    sort [-fbnruk]   [file or stdin]
    -f #忽略大小写差异；  -b #忽略最前面的空格符部分； -n #用纯数字进行排序； -r #反向排序； -u #unique，相同的数据仅出现一行； -k #以某个字段进行排序
    cat /etc/passwd | sort -t ':' -k 3
    
18. wc 也就是word count 统计文件的字数，行数和字符数
    wc [-lwm]    # -l 仅列出行； -w 仅列出单词数； -m 列出总字符个数
    cat /etc/man.config | wc    #显示man.config中的字数，行数，字符数
    
19. tee 双向重定向，同时将数据流送与文件与屏幕
    tee [-a] file  # -a 以累加的方式写入file文件
    last | tee last.list | cut -d " " -f 1
    ls -l | tee -a ~/homefile | more
20. split 切割命令，可根据文件大小或行数切割文件
    split [-bl] 被切割文件 切割后文件的名字前缀
    split -b 300k /etc/termcap splitterm   # -b 后接单位如b,k,m 表示欲切割文件的大小
    split -l 10 file splitfile             # -l 以行数来进行切割

21. 正则表达式中特殊符号
    [:alnum:]    英文大小写字符及数字
    [:alpha:]    英文大小写字符
    [:blank:]    空格键与tab键
    [:digit:]    数字 0-9
    [:lower:]    小写字符 a-z
    [:upper:]    大写字符A-Z
    [:xdigit:]   十六进制数字类型 包括 0-9，a-f，A-F
    
22. 正则表达式字符
    ^word      待查找的字符串（word）在行首
    word$      待查找的字符串（word）在行尾
    .          一定有一个任意字符的字符
    \          转义字符
    *          前一个字符重复0到无穷多个
    [list]     从字符列表中选取任意1个
    [n1-n2]    从字符范围内选取任意1个
    [^list]    方向选取，找出不在列表或范围内的字符
    
23. 扩展正则表达式字符    
    +      重复一个或一个以上前一个字符
    ?      0个或1个前一个字符
    |      用或的方式找出数个字符串      比如 egrep -n 'gd|good' text  找出gd或good两个字符串
    
24. shell script 是利用shell功能所写的一个程序，将一些shell的命令语法搭配正则表达式、管道命令与数据流重定向等功能。
    <1> 命令执行从上而下，从左而右地分析与执行；
    <2> 命令的执行时，命令、参数间的多个空白都会被忽略掉
    <3> 空白行也被忽略掉，并且tab键所得的空白同样视为空格键
    <4> 如果读取一个Enter符号（CR），就尝试开始执行该行命令；
    <5> 如果一行内容太多，则可以用“\”来扩展到下一行
    <6> “#” 可以用于注释
25. shell script 执行
    <1> 绝对路径来执行 /home/dmtsai/shell.sh
    <2> 相对路径执行 ./shell.sh
    <3> 以bash进程来执行 sh shell.sh
    
26. shell script 内容
    <1> 用 #!/bin/bash 声明这个script 使用的shell的名称；
    <2> 设置PATH 比如 PATH=/bin:/sbin:/usr
    <3> 

