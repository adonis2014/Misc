[普通模式]:
f{char} 命令让Vim查找下一处指定字符出现的位置,如果找到了,就直接把光标移到那里
;       命令会正向重复查找上次 f 命令所查找的字符
,       命令会反向查找上次 f{char}所查找的字符
.       命令会“重复上次修改”
a       命令在当前光标之后添加内容
A       命令则在当前行的结尾添加内容
cw      删除光标位置到单词结尾的字符，并进入插入模式  cw = change one word, c3w = change 3 words 所以会进入插入模式
ciw     同上
c       删除指定文本，并切换到插入模式(与可视模式配合使用)
cit     = change inside tag 删除标签内部的内容并进入插入模式
dit     = delete inside tag
yit     = yank inside tag  拷贝标签内的文本
o       在光标下方开始新的一行，并进入插入模式
j       按实际行向下移动（普通模式）
k       按实际行向上移动（普通模式）
h       向左移动（普通模式）
l       向右移动（普通模式）
gj      按屏幕行向下移动（当一行超过屏幕宽度后会占多个屏幕行，但仍是一个实际行）
gk      按屏幕行向上移动
0       移动到实际行行首
g0      移动到屏幕行行首
^       移动到实际行第一个非空白字符
$       移动到实际行行尾
g$      移动到屏幕行行尾
w       正向移动到下一个单词开头
b       反向移动到上一个单词开头
e       正向移动到下一个单词结尾
ge      反向移动到上一个单词结尾
ea      在当前单词结尾后添加
daw     = delete a word  类比 d3w = delete 3 words
das     = delete a sentence
dap     = delete a paragraph
dt.     = delete till character '.' 不删除句号
d/ge<Enter> 删除当前光标到"ge"关键词之前的所有内容 （结合了删除和查找两个指令）
Ctrl + a  对光标所在数字加 1; 10<Ctrl + a> 对光标所在数字加 10
Ctrl + x  对光标所在数字减 1; 10<Ctrl + x> 对光标所在数字减 10
gUaw      把当前单词转为大写
g~ + movement   Toggle case "HellO" to "hELLo" with g~ then a movement.
gU + movement   Uppercase "HellO" to "HELLO" with gU then a movement.
gu + movement   Lowercase "HellO" to "hello" with gu then a movement.
>>        增加缩进当前行
<<        减小缩进当前行
`.        跳到上次修改的地方
``        当前文件中上次跳转动作之前的位置
%         可用于在匹配的{},()或[]括号间跳转 （即找到跳到与之匹配的括号）
x         将光标所在处的字符剪切下来，并放到无名寄存器
p         将无名寄存器的内容粘贴到光标后面， 或放到当前行的下一行
P         paste before the cursor
dd        剪切当前行，并放入无名寄存器中
yy        复制当前行，并放入无名寄存器中


[插入模式]:
<Ctrl-r>=3*4<CR> 会计算3*4的结果并填在对应位置   这里的r是register的意思
<Ctrl-w>         删除前一个单词
<Ctrl-u>         删除至行首
<Ctrl-v>{code}   以10进制插入编码为code的字符，适用于非常用字符的输入      
<Ctrl-v>u{1234}  以16进制插入编码为code的字符
I                进入插入模式，光标到行首
i                进入插入模式，光标在当前位置

[可视模式]：
v                激活面向字符的可视模式
V                激活面向行的可视模式
<Ctrl-v>         激活面向列块的可视模式
gv               重选上次高亮选区
viw              高亮选中一个词（相当于按v，移动光标选中一个词）
vi}              当光标在{}内部时，该命令会高亮选中{和}之间的所有字符
va"              高亮选中""之间的所有字符，包括""本身
o                切换高亮选区的活动端点
vit              高亮选中标签(tag)内部的内容
vat              选中一对XML标签及内部的所有内容
r|               用管道符替换此选区中的字符
Vr-              用连字符替换整一行的字符
>                增加缩进
<                减少缩进
// Vim 的文本对象由两个字符组成，第一个字符是i或a，分别代表inside(不含分隔符)和all(包含分隔符)


[命令行模式]：
在按下“:”键时, Vim会切换到命令行模式。
:2,5p                    print 从第2行到第5行的内容
:%s/foo/bar/gc           Change each 'foo' to 'bar', but ask for confirmation first.
:%s/foo/bar/gcI          Change each 'foo' (case sensitive due to the I flag) to 'bar'; ask for confirmation.
:[range]copy {address}   拷贝range中的行，并粘贴到address位置. 其中，copy 可缩写为 t ( = to)
:t$                      把当前行复制到文本末尾
:[range]move {address}   把range中的行剪切移动到address的位置. move 可缩写为 m
:'<,'>normal .           对高亮选区中的每一行执行普通模式下的 . 命令
@:                       重复上次Ex命令
:!ls                     查看当前目录下的内容 (!前缀用于运行shell命令)   只能执行一次
:shell                   启动交互的shell会话，可以执行多条指令。用exit退出shell，返回vim
:sort                    在选定文本对象上(比如vi{命令选择{}之间的文本对象)，按照字母表顺序sort

[替换模式]：
R 进入替换模式，相当于键盘上的insert键

//Vim的语法只有一条额外的规则，当一个操作符连续调用2次，它会作用与当前行

管理多个文件
通常说“正在编辑一个文件”, 实际上编辑的是文件在内存中的映像,也就是Vim中的“缓冲区”
:ls                       罗列所有缓冲区文件列表 (%符号表示哪个缓冲区在当前窗口中可见)
:bdelete N1 N2 N3         删除缓冲区
:buffer N                 直接凭编号跳转到一个缓冲区
:bdelete N1 N2 N3         删除缓冲区


<Ctrl-w>s                 水平切分窗口
<Ctrl-w>v                 垂直切分窗口
:vsplit {file}            垂直切分窗口，并在新窗口中载入{file}
<Ctrl-w>w                 在窗口间循环切换
:close                    关闭活动窗口
:only                     关闭除活动窗口以外的其他所有窗口
:tabedit {filename}       打开一个新的标签页（tabpage）  可以用tab键自动补全filename
<Ctrl-w>T                 把当前窗口移到一个新的标签页
gt                        切换到下一个标签页
gT                        切换到上一个标签页
:edit {filename}          可以接受相对于工作目录的文件路径， tab键可以自动补全filename
:edit .                   打开文件管理器，显示当前工作目录
:find                     允许我们通过文件名打开文件，但必须首先配置'path'选项
// netrw 可用来管理文件系统(vim自带插件)。配置好vimrc后，可以在文件夹中打开文件目录。
:Explore                  打开文件管理器，并显示活动缓冲区所在目录, 可简写为:E
<Ctrl- shift - ^>         切换回刚才编辑的文件(针对Explore这个命令)
:Vexplore                 在垂直切分窗口中打开文件管理器
// netrw = across NETwork Read and Write files 支持通过网络读写文件 (利用多种网络协议读写文件，包括:scp, ftp, curl, wget)

/**********************    文件中的跳转 （跳转列表）*********************/
[remark]: 任何改变当前窗口中活动文件的命令，都可以被称为跳转命令。Vim会把执行跳转命令之前和之后的光标位置记录到跳转列表(jump list)中
:jumps                    查看跳转列表的内容
<Ctrl-o>                  跳转列表中的后退命令
<Ctrl-i>                  跳转列表中的前进命令
H/M/L                     跳到屏幕的上方/正中间/最下方

[remark]: Vim会在编辑会话期间维护一张表，记录每个缓冲区的修改。这张表就是改变列表(change list)
:changes                  查看改变列表的内容
g;                        正向遍历改变列表
g,                        反向遍历改变列表

gf                        跳转到光标下的文件 (适用于浏览代码时打开某个头文件)  需要配置suffixesadd 和 path

<Ctrl-]>                  跳转到匹配光标所在关键字的第一处标签 (需要配置ctag)
<Ctrl-t>                  返回到原先光标所在处，是<Ctrl-]>的返回操作
g<Ctrl-]>                 若有多处匹配光标处的关键字，提示用户指定一处跳转；若只有一处匹配，直接跳转

:tag {keyword}            jump to first tag that matches {keyword}   与<Ctrl-]>效果相同，只不过在命令行模式下
:tjump {keyword}          与g<Ctrl-l>等价
:tnext                    跳到下一个匹配的标签
:tprev                    跳到上一个匹配的标签
:tselect                  让用户从标签匹配列表中选择一个进行跳转

m{letter}                 在当前光标位置创建一个位置标记(lowercase是局部标记，uppercase是全局标记)
`{letter}                 使光标快速回到标记所在之处

/**********************  Vim 中的寄存器  *********************/
[remark]: 可以通过"{register}的前缀指定使用的寄存器
"ayiw                     把当前单词复制到寄存器a中
"bdd                      把当前整行文本剪切至寄存器b中

[remark]: x, s, d{motion}, y{motion}, c{motion} 都会覆盖无名寄存器中的内容
[remark]: 复制专用寄存器是0，只有y{motion}会作用在该寄存器
"0P                       粘贴复制专用寄存器中的内容
"+p                       把外部程序复制或剪切的内容粘贴到vim内部 (普通模式)
"+y                       把Vim编辑的内容复制到系统剪贴板，以便粘贴到外部程序
<Ctrl-r>+                 把外部程序复制或剪切的内容粘贴到vim内部 (插入模式)
<Ctrl-r>"                 在光标处插入无名寄存器的内容 (插入模式)
<Ctrl-r>0                 在光标处插入复制专用寄存器的内容 (插入模式/命令模式)

/**********************  查找，匹配，替换  *********************/
/{pattern}\c               查找模式忽略大小写
/{pattern}\C               查找模式强制区分大小写
/\v{pattern}               激活magic模式，即除字母数字下划线外，其他字符都具有特殊含义 (这样在正则匹配时不用为每个括号打转义字符)
/\V{pattern}               激活very nomagic 模式， 按照原义查找，比如 /\Va.k.a 查找 "a.k.a"
/\v<the>                   查找“the”这个完整的单词，而不是其他单词的组成部分
[remark]:  / 是正向查找提示符（从光标位置向后查找）;   ? 是反向查找提示符（从光标位置向前查找）
[remark]:  激活incsearch功能后，依次输入查找模式的每个字符时，Vim会即时更新预览内容，类似于type ahead效果。此功能可用于判断文档中是否有某个词，而不必移动光标位置
*                          普通模式中，该命令可以查找光标所在处的单词

[remark]: 替换的完整命令是 :[range]s[ubstitute]/{pattern}/{string}/[flags]
                          其中flags有如下几种：
                          g     使得 subsititute命令可在全局范围内执行, 即修改一行内所有的匹配，而不是第一个匹配。
                          c     相当于confirm, 让我们有机会可以确认和拒绝每一处替换
                          n     抑制正常的替换行为，Vim不执行替换操作，只报告匹配的个数
\={Vim script}            允许执行一段代码，再将其结果作为替换域中的{string}使用


/**********************  global命令  *********************/
[remark]: global 命令结合了Ex命令和Vim的模式匹配，可以在某个模式的所有匹配行上运行Ex命令. 格式如下:
          :[range] global[!] /{pattern}/ [cmd]
          range 默认是全文
:v/href/d       只保留匹配行，删除所有不包含href的文本行 
:g/TODO         print出所有TODO的注释行
:g/TODO/yank A  把所有包含TODO注释的行复制到寄存器A中

/**********************  Quickfix列表浏览错误信息  *********************/
Quickfix 维护文件名，行号，列号与消息组成的注释定位信息，用于debug。
:make           调用编译器(任意语言未必是GCC)来编译整个工程, 并自动跳转到第一个错误上
:make!          编译整个工程，更新quickfix列表，而不跳到第一处错误
:cnext          跳到下一项
:cprev          跳到前一项
:cnfile         跳到下一个文件的第一项
:cpfile         跳到上一个文件的最后一项
:copen          打开quickfix窗口
:close          关闭quickfix窗口

