[普通模式]:
f{char} 命令让Vim查找下一处指定字符出现的位置,如果找到了,就直接把光标移到那里
;       命令会正向重复查找上次 f 命令所查找的字符
,       命令会反向查找上次 f{char}所查找的字符
.       命令会“重复上次修改”
a       命令在当前光标之后添加内容
A       命令则在当前行的结尾添加内容
cw      删除光标位置到单词结尾的字符，并进入插入模式  cw = change one word, c3w = change 3 words 所以会进入插入模式
c       删除指定文本，并切换到插入模式(与可视模式配合使用)
o       在光标下方开始新的一行，并进入插入模式
j       向下移动（普通模式）
k       向上移动（普通模式）
h       向左移动（普通模式）
l       向右移动（普通模式）
daw     = delete a word  类比 d3w = delete 3 words
dap     = delete a paragraph
Ctrl + a  对光标所在数字加 1; 10<Ctrl + a> 对光标所在数字加 10
Ctrl + x  对光标所在数字减 1; 10<Ctrl + x> 对光标所在数字减 10
gUaw      把当前单词转为大写
g~ + movement   Toggle case "HellO" to "hELLo" with g~ then a movement.
gU + movement   Uppercase "HellO" to "HELLO" with gU then a movement.
gu + movement   Lowercase "HellO" to "hello" with gu then a movement.
>>        增加缩进当前行
<<        减小缩进当前行

[插入模式]:
<Ctrl-r>=3*4<CR> 会计算3*4的结果并填在对应位置   这里的r是register的意思
<Ctrl-w>         删除前一个单词
<Ctrl-u>         删除至行首
<Ctrl-v>{code}   以10进制插入编码为code的字符，适用于非常用字符的输入      
<Ctrl-v>u{1234}  以16进制插入编码为code的字符
I                进入插入模式，光标到行首
i                进入插入模式，光标在当前位置

[可视模式]：
v                激活面向字符的可视模式
V                激活面向行的可视模式
<Ctrl-v>         激活面向列块的可视模式
gv               重选上次高亮选区
viw              高亮选中一个词（相当于按v，移动光标选中一个词）
o                切换高亮选区的活动端点
vit              高亮选中标签内部的内容
r|               用管道符替换此选区中的字符
Vr-              用连字符替换整一行的字符
>                增加缩进
<                减少缩进

[命令行模式]：
在按下“:”键时, Vim会切换到命令行模式。
:2,5p                    print 从第2行到第5行的内容
:%s/foo/bar/gc           Change each 'foo' to 'bar', but ask for confirmation first.
:%s/foo/bar/gcI          Change each 'foo' (case sensitive due to the I flag) to 'bar'; ask for confirmation.
:[range]copy {address}   拷贝range中的行，并粘贴到address位置. 其中，copy 可缩写为 t ( = to)
:t$                      把当前行复制到文本末尾
:[range]move {address}   把range中的行剪切移动到address的位置. move 可缩写为 m
:'<,'>normal .           对高亮选区中的每一行执行普通模式下的 . 命令
@:                       重复上次Ex命令
:!ls                     查看当前目录下的内容 (!前缀用于运行shell命令)   只能执行一次
:shell                   启动交互的shell会话，可以执行多条指令。用exit退出shell，返回vim

[替换模式]：
R 进入替换模式，相当于键盘上的insert键

Vim的语法只有一条额外的规则，当一个操作符连续调用2次，它会作用与当前行

管理多个文件
通常说“正在编辑一个文件”, 实际上编辑的是文件在内存中的映像,也就是Vim中的“缓冲区”
:ls                       罗列所有缓冲区文件列表 (%符号表示哪个缓冲区在当前窗口中可见)
:bdelete N1 N2 N3         删除缓冲区
:buffer N                 直接凭编号跳转到一个缓冲区
:bdelete N1 N2 N3         删除缓冲区
